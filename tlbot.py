from TOKEN import TOKEN, keep_alive
import telebot
from telebot import types
import sympy as sp
import math
import re
from sympy import Eq, solve, symbols, parse_expr, sin, cos, tan, cot, rad

bot = telebot.TeleBot(token=TOKEN)

# BUTTONS
my_skills_bt = types.KeyboardButton(text='–£–º–µ–Ω–∏—èü§ì')
primec_bt = types.KeyboardButton(text='–ü—Ä–∏–º–µ—á–∞–Ω–∏–µüìÉ')
bio_bt = types.KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èü•∏')

# KEY BOARDS
kb_info = types.ReplyKeyboardMarkup(resize_keyboard=True)
kb_info.add(my_skills_bt, bio_bt).row(primec_bt)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–∏–Ω—É—Å–æ–≤ –∏ —Ç.–ø
def zamena(x):
    # –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞–∫ —Å—Ç–µ–ø–µ–Ω–∏
    x = re.sub(r'(\d+)\)', r'math.radians(\1))', x)
    # –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    x = x.replace('sin(', 'math.sin(')
    x = x.replace('cos(', 'math.cos(')
    x = x.replace('tan(', 'math.tan(')
    return x


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–Ω–∞–∫–∞ = –≤ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞—Ö
def solve_inequality(user_input: str, inequality_type: str):
    # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
    user_input = user_input.replace('oo', 'sp.oo')

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏
    left, right = user_input.split(inequality_type)
    left_expr = sp.parse_expr(left)
    right_expr = sp.parse_expr(right)

    # –†–µ—à–∞–µ–º –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
    solution = sp.solve_univariate_inequality(sp.Eq(left_expr, right_expr), sp.symbols('x'), relational=False)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É
    formatted_solution = sp.pretty(solution, use_unicode=True)

    return formatted_solution


# HAHDLERS
@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda message: message.text.lower() in ['–Ω–∞—á–∞—Ç—å', '–ø—Ä–∏–≤–µ—Ç'])
def start_reply(message):
    bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç!üëã\n\n'
                                           '–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ! üìä'
                                           '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É –∏ —è –ø–æ—Å—Ç–æ—Ä–∞—é—Å—å –µ—ë —Ä–µ—à–∏—Ç—å!', reply_markup=kb_info)


# –æ—Ç–≤–µ—Ç –Ω–∞ —É–º–µ–Ω–∏—è
@bot.message_handler(commands=['skills'])
@bot.message_handler(func=lambda message: message.text in ['–£–º–µ–Ω–∏—èü§ì'])
def skills(message):
    bot.send_message(message.chat.id, text='–í–æ—Ç –≤—Å–µ, —á—Ç–æ —è —É–º–µ—é —Ä–µ—à–∞—Ç—å üìù:\n\n'
                                           '1. –ü—Ä–∏–º–µ—Ä—ã\n'
                                           '2. –£—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π\n'
                                           '3. –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞\n\n'
                                           '–¢–∞–∫–∂–µ –≤–µ–¥–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥—Ä—É–≥–æ–≥–æ!üßëüèª‚Äçüíª')


# –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
@bot.message_handler(commands=['rules'])
@bot.message_handler(func=lambda message: message.text in '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µüìÉ')
def primec(message):
    bot.send_message(message.chat.id, text='<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µüìÉ</b>:\n\n'
                                           '   <b>1. –î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞–∫ "*"</b>\n'
                                           '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–∏:\n'
                                           '        5x‚ùå\n'
                                           '        5 * x‚úÖ\n'
                                           '        4 * 3‚úÖ\n\n'

                                           '   <b>2. –î–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–µ–ø–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "**" –∏–ª–∏ "^"</b>\n'
                                           '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–∏:\n'
                                           '       2^4 (2 –≤ 4-–æ–π —Å—Ç–µ–ø–µ–Ω–∏)\n '
                                           '      x ** 2 (x –≤–æ 2-–æ–π —Å—Ç–µ–ø–µ–Ω–∏)\n\n'

                                           '   <b>3.–ü—Ä–∏ –∑–∞–ø–∏—Å–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "x"</b>\n'
                                           '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–∏:\n'
                                           '       5 * a = 10‚ùå\n'
                                           '       5 * x = 10‚úÖ\n\n'

                                           '   <b>4. –ì—Ä–∞–¥—É—Å—ã –¥–ª—è sin, cos, tg, ctg –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Å–∫–æ–±–∫–∞—Ö"</b>\n'
                                           '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–∏:\n'
                                           '       cos 15 ‚ùå\n'
                                           '       sin(30)‚úÖ\n'
                                           '       sin(45) + tg(90)‚úÖ\n', parse_mode='HTML')


@bot.message_handler(commands=['info'])
@bot.message_handler(func=lambda message: message.text in ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èü•∏'])
def info(message):
    bot.send_message(message.chat.id, text=
    '–í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –º–æ—â–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–∞—â–µ –¥—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞, –ø—Ä–æ—Å—Ç–æ –∏—Ö –º–∞–ª–æ, –∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –Ω–∞–¥–æ —Ö–æ—Ç—è –±—ã 3 –∏–º–µ—Ç—åüí™üèªüòà')


@bot.message_handler(func=lambda message: '=' in message.text)
def solve_equation_or_expression(message):
    try:
        # –í–≤–æ–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        x = symbols('x')

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ

        user_input = message.text.lower()
        user_input = user_input.replace('^', '**')
        user_input = zamena(user_input)

        # –†–∞–∑–¥–µ–ª—è–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏
        equation_parts = user_input.split('=')

        # –†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if len(equation_parts) == 2:
            left = equation_parts[0]
            right = equation_parts[1]

            equation = Eq(eval(left), eval(right))

            # –†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
            result = solve(equation, x)

            formatted_res = ('; '.join(
                [f'x = {str(round(sol, 3)).rstrip("0").rstrip(".") if "." in str(sol) else str(sol)}' for sol in
                 result]))
            bot.send_message(message.chat.id, text=f'–û—Ç–≤–µ—Ç: {formatted_res}')

        else:
            bot.send_message(message.chat.id,
                             text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ.\n\n –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –∑–∞–ø–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')

    except Exception as e:
        bot.send_message(message.chat.id,
                         text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:(\n\n–û—à–∏–±–∫–∞(–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –≤ –±—É–¥—É—â–µ–º —ç—Ç–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç): {e} ')


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤
@bot.message_handler(
    func=lambda message: '<' in message.text or '>' in message.text or '>=' in message.text or '<=' in message.text)
def solve_inequality(message: types.Message):
    try:
        user_input = message.text.lower()

        # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
        user_input = user_input.replace('oo', 'sp.oo')

        # –†–µ—à–∞–µ–º –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
        x = sp.symbols('x')
        solution = sp.solve_univariate_inequality(sp.parse_expr(user_input), x, relational=False)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É
        formatted_solution = sp.pretty(solution, use_unicode=True)

        bot.send_message(message.chat.id, text='–û—Ç–≤–µ—Ç: x ‚àà ' + formatted_solution)

    except Exception as e:
        bot.send_message(message.chat.id, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n\n{e}(–¥–ª—è —Ä–∞–∑—Ä–∞–±–∞)')


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler()
def handle_expression(message: types.Message):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        user_input = message.text.lower()
        user_input = zamena(user_input)

        # –†–µ—à–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        result = eval(user_input)

        formatted_res = str(round(result, 3)).rstrip('0').rstrip('.') if '.' in str(result) else str(result)
        bot.send_message(message.chat.id, text=f'–û—Ç–≤–µ—Ç: {formatted_res}')

    except Exception as e:
        bot.send_message(message.chat.id,
                         text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:(\n\n\–û—à–∏–±–∫–∞(–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –≤ –±—É–¥—É—â–µ–º —ç—Ç–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç): {e} ')


#
# keep_alive()  # –∑–∞–ø—É—Å–∫–∞–µ–º flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ...

bot.polling()
